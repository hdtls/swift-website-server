name: CI

on: [push, pull_request]

jobs:
  test:
    strategy:
      fail-fast: false
      matrix:
        db:
          - mysql:latest
    container: swift:latest
    runs-on: ubuntu-latest
    services:
      mysql:
        image: ${{ matrix.db }}
        env:
          MYSQL_USER: swift 
          MYSQL_PASSWORD: mysql
          MYSQL_DATABASE: blog
          MYSQL_RANDOM_ROOT_PASSWORD: "yes"
    steps:
      - name: Check out test case
        uses: actions/checkout@v3

      - name: Install rsync
        run: apt -q update && apt -q dist-upgrade -y && apt -q install -y rsync
      
      - name: Install Python and rsync
        run: |
          apt -q update 
          apt -q dist-upgrade -y 
          apt -q install -y rsync software-properties-common
          add-apt-repository -y ppa:deadsnakes/ppa
          apt -q install -y python3.10
          ln -s `which python3.10` /usr/local/bin/python
          python --version

      - name: Run tests
        env:
          MYSQL_HOST: mysql
        run: python build-script.py --test --configuration release --sanitize thread

  push_to_registry:
    if: startsWith(github.ref, 'refs/tags/') || startsWith(github.ref, 'refs/heads/')
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      
      - name: Prepare docker image description
        id: repository
        uses: actions/github-script@v3
        with:
          script: |
            const repo = await github.repos.get(context.repo)
            return repo.data
            
      - name: Prepare docker image version and tags.
        id: prepare
        run: |
          DOCKER_IMAGE=${{ secrets.DOCKER_REGISTRY }}/${{ secrets.DOCKER_REPOSITORY }}
          VERSION=noop
          
          if [ "${{ github.event_name }}" = "schedule" ]; then
            VERSION=nightly
          elif [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          elif [[ $GITHUB_REF == refs/heads/* ]]; then
            VERSION=$(echo ${GITHUB_REF#refs/heads/} | sed -r 's#/+#-#g')
            if [ "${{ github.event.repository.default_branch }}" = "$VERSION" ]; then
              VERSION=edge
            fi
          fi
          
          TAGS="${DOCKER_IMAGE}:${VERSION}"

          if [[ $VERSION =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
            MINOR=${VERSION%.*}
            TAGS="$TAGS,${DOCKER_IMAGE}:${MINOR},${DOCKER_IMAGE}:latest"
          elif [ "${{ github.event_name }}" = "push" ]; then
            TAGS="$TAGS,${DOCKER_IMAGE}:${{ secrets.DOCKER_REPOSITORY }}-DEVELOPMENT-SNAPSHOT-sha-${GITHUB_SHA::8}"
          fi
          
          echo ::set-output name=version::${VERSION}
          echo ::set-output name=tags::${TAGS}
          echo ::set-output name=created::$(date -u +'%Y-%m-%dT%H:%M:%SZ')

      - name: Install Python and rsync
        run: |
          sudo apt -q update 
          sudo apt -q dist-upgrade -y 
          sudo apt -q install -y rsync software-properties-common
          sudo add-apt-repository -y ppa:deadsnakes/ppa
          sudo apt -q install -y python3.10
          ln -s `which python3.10` /usr/local/bin/python
          python --version

      - name: Generate source files
        run: python build-script.py --degyb-only

      - name: Setup QEMU
        uses: docker/setup-qemu-action@v2

      - name: Setup docker buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Login to registry
        uses: docker/login-action@v2
        with:
          registry: ${{ secrets.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKER_REGISTRY_USERNAME }}
          password: ${{ secrets.DOCKER_REGISTRY_PASSWORD }}
      
      - name: Build and push docker to registry
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./docker/Dockerfile
          push: true
          tags: ${{ steps.prepare.outputs.tags }}
          labels: |
            org.opencontainers.image.title=${{ fromJson(steps.repository.outputs.result).name }}
            org.opencontainers.image.description=${{ fromJson(steps.repository.outputs.result).description }}
            org.opencontainers.image.url=${{ fromJson(steps.repository.outputs.result).html_url }}
            org.opencontainers.image.source=${{ fromJson(steps.repository.outputs.result).clone_url }}
            org.opencontainers.image.version=${{ steps.prepare.outputs.version }}
            org.opencontainers.image.created=${{ steps.prepare.outputs.created }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.licenses=${{ fromJson(steps.repository.outputs.result).license.spdx_id }}
